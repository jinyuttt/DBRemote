/**    
 * 文件名：SocketCache.java    
 *    
 * 版本信息：    
 * 日期：2017年4月12日    
 * Copyright 足下 Corporation 2017     
 * 版权所有    
 *    
 */
package JudtProtocol;


import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.atomic.AtomicInteger;

import DDS_Transfer.IRecMsg;
import udt.UDTSocket;

/**    
 *     
 * 项目名称：ThirdPartyProtocol    
 * 类名称：SocketCache    
 * 类描述：    
 * 创建人：jinyu    
 * 创建时间：2017年4月12日 下午9:13:52    
 * 修改人：jinyu    
 * 修改时间：2017年4月12日 下午9:13:52    
 * 修改备注：    
 * @version     
 *     
 */
public class SocketCache {
    AtomicInteger id=new  AtomicInteger(0);
    LinkedBlockingQueue <SocketData[]> socketQueue=new LinkedBlockingQueue <SocketData[]>();
    LinkedBlockingQueue<SocketData> unAction=new LinkedBlockingQueue<SocketData>();
      
    SocketData[]sockets=null;
    Thread singleThread=null;
    Thread unactionThread=null;
    int index=0;
    int groupSize=10;
    public boolean isRunning=true;
   public SocketCache()
   {
       singleThread=new Thread(new Runnable()
               {

                @Override
                public void run() {
                   while(isRunning)
                   {
                       checkAction();
                   }
                    
                }
                
               });
       singleThread.setDaemon(true);
       singleThread.setName("checkActionSocket");
       //
       unactionThread=new Thread(new Runnable()
               {

                @Override
                public void run() {
                  
                    
                }
           
               });
   }
    /*
     * 采集获取的socket
     * 可以满足长连接需求
     * 所有客户端和服务端的对象都不真正调用关闭
     * 而是衰减
     */
    public void addSocket(UDTSocket socket, UdtProtocol protol,IRecMsg rec)
    {
        try {
            SocketData data=new SocketData();
            data.id=id.incrementAndGet();
            data.protol=protol;
            data.socket=socket;
            data.outRec=rec;
            if(index%groupSize==0)
            {
                //1000个为一组
                sockets=new  SocketData[groupSize];
                sockets[index%groupSize]=data;
                socketQueue.put(sockets);
            }
            else
            {
                sockets[index%groupSize]=data;
            }
            index++;
           
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
    }
    /*
     * 检查活动的
     */
    private void checkAction()
    {
        try {
            Thread.sleep(1000);
        } catch (InterruptedException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
        //
        try {
            SocketData[] socket=socketQueue.poll(2, TimeUnit.SECONDS);
            if(socket==null)
            {
                //检查已经存在的
                for(int i=0;i<index%groupSize;i++)
                {
                    //如果没有满足一组，则检查当前的
                    //当index%groupSize，返小，则还回
                    checkSocket(sockets[i]);
                    sockets[i]=null;
                }
            }
            else
            {
                checkGroup(socket);
            }
            } catch (InterruptedException e) {
            e.printStackTrace();
        }
        
    }
   
    /*
     * 检查分组存活
     */
    private void checkGroup(SocketData[] sockets)
    {
        for(int i=0;i<sockets.length;i++)
        {
            SocketData data=sockets[i];
            checkSocket(data);
        }
    }
    /*
     * 检查socket存活
     */
    private void checkSocket(SocketData data)
    {
        if(data!=null)
        {
           if(data.socket.isActive()&&data.socket.getSession().getState()!=4)
           {
               //socket是活动的并且没有关闭
               ProcessThread pThread=new ProcessThread(data.socket, data.outRec,data.protol);
               pThread.setDaemon(true);
               pThread.start();
           }
        }
    }
    
    private void  unActionSocket()
    {
        try {
            SocketData data= unAction.take();
            if(data.socket!=null)
            {
            if(!data.socket.isActive()||data.socket.getSession().isShutdown())
            {
                data.socket.getEndpoint().Remove( data.socket.getSession().getSocketID());
            }
            }
        } catch (InterruptedException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
    }
    public class SocketData
    {
        int id;
        UdtProtocol protol;
        UDTSocket socket;
        IRecMsg outRec;
    }
}
