package ServerProxy;

import Common.JsonConvert;
import DBManager.ClientRecvice;
import DBManager.SqlDataReader;
import DDS_Transfer.IDDS_Protocol;
import DataStruct.DBResult;
import DataStruct.MethodType;
import DataStruct.SqlRequest;
import ProtocolsManager.ProtocolManager;

public class Proxy {
 private   IDDS_Protocol protocol = null;
 private  String addr="";
 private  int port=0;
 public boolean is_MD5=false;//加密
 public boolean isClose=false;//是否关闭
 private int remoteID=-1;
 private String flage="";
 private SqlDataReader reader=null;
    public Proxy(IDDS_Protocol protos)
    {
        //设置连接端口
        protocol=protos;
    }
    public Proxy(IDDS_Protocol protos,String remoteaddr,int port)
    {
        addr=remoteaddr;
        this.port=port;
        //设置连接端口
        protocol=protos;
    }
    public Proxy(String remoteaddr,int port) {
        
        addr=remoteaddr;
       this.port=port;
        //创建连接端口
        if (protocol == null) {
            try {
                protocol = (IDDS_Protocol) ProtocolManager.getInstance().CreateObject("udt");
            } catch (InstantiationException e) {

                e.printStackTrace();
            } catch (IllegalAccessException e) {

                e.printStackTrace();
            }
        }
    }
    
    /*
     * 获取下一组数据
     */
    public void getNextReader(int id, String flage,SqlDataReader reader)
    {
        this.remoteID=id;
        this.flage=flage;
        this.reader=reader;
        QueryData();
    }
    
    /*
     * 发送信息
     */
    private DBResult SendQuest(int id, String flage) {

        if (protocol != null) {
          protocol.ClientSocketClose();
          protocol.Connect(addr, port);
            SqlRequest obj = new SqlRequest();
            obj.CloseFlage = flage;
            obj.sql = String.valueOf(id);
            obj.methodType = MethodType.ExecuteNonQuery;
            byte[] data = JsonConvert.ConvertJsonByte(obj);
            protocol.ClientSocketSendData(data);
            if(flage.equals("close"))
            {
                protocol.ClientSocketClose();
                System.out.println("关闭");
                
            }
            else
            {
              ClientRecvice recvice=new ClientRecvice(protocol);
              DBResult result= recvice.recResult();
              return result;
            }
        }
        return null;

    }
    private void QueryData()
    {
        Thread query=new Thread(new Runnable()
                {

                    @Override
                    public void run() {
                     
                        
                    }
            
                });
    }

}
