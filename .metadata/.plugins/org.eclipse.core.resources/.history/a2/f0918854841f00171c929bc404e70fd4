/**    
 * 文件名：SocketCache.java    
 *    
 * 版本信息：    
 * 日期：2017年4月12日    
 * Copyright 足下 Corporation 2017     
 * 版权所有    
 *    
 */
package JudtProtocol;

import java.util.concurrent.Executors;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.atomic.AtomicInteger;

import DDS_Transfer.IRecMsg;
import JudtProtocol.JudtManager.SocketData;
import udt.UDTSocket;

/**    
 *     
 * 项目名称：ThirdPartyProtocol    
 * 类名称：SocketCache    
 * 类描述：    
 * 创建人：jinyu    
 * 创建时间：2017年4月12日 下午9:13:52    
 * 修改人：jinyu    
 * 修改时间：2017年4月12日 下午9:13:52    
 * 修改备注：    
 * @version     
 *     
 */
public class SocketCache {
    AtomicInteger id=new  AtomicInteger(0);
    LinkedBlockingQueue <SocketData[]> socketQueue=new LinkedBlockingQueue <SocketData[]>();
    ScheduledExecutorService service = Executors  
            .newSingleThreadScheduledExecutor();  
    SocketData[]sockets=null;
    int index=0;
    /*
     * 采集获取的socket
     * 可以满足长连接需求
     * 所有客户端和服务端的对象都不真正调用关闭
     * 而是衰减
     */
    public void addSocket(UDTSocket socket, UdtProtocol protol,IRecMsg rec)
    {
        try {
            SocketData data=new SocketData();
            data.id=id.incrementAndGet();
            data.protol=protol;
            data.socket=socket;
            data.outRec=rec;
            if(index%1000==0)
            {
                //1000个为一组
                sockets=new  SocketData[1000];
                sockets[index%1000]=data;
                socketQueue.put(sockets);
            }
            else
            {
                sockets[index%1000]=data;
            }
            index++;
           
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
    }
    private void checkAction()
    {
        try {
            Thread.sleep(1000);
        } catch (InterruptedException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
        //
        try {
            SocketData[] sockets=socketQueue.take();
            ProcessThread pThread=new ProcessThread(s, rec,curProtol);
            pThread.setDaemon(true);
            pThread.start();
        } catch (InterruptedException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
        
    }
    private void checkAction(SocketData[] sockets)
    {
        for(int i=0;i<sockets.length;i++)
        {
            SocketData data=sockets[i];
            
        }
    }
    public class SocketData
    {
        int id;
        UdtProtocol protol;
        UDTSocket socket;
        IRecMsg outRec;
    }
}
