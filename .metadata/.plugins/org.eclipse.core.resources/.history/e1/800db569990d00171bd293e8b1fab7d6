package ThirdPartyProtocol;

import java.io.IOException;
import java.net.InetAddress;
import java.net.SocketException;
import java.net.UnknownHostException;

import DDS_Transfer.IDDS_Protocol;
import DDS_Transfer.IRecMsg;
import DDS_Transfer.ProtocolType;
import udt.UDPEndPoint;
import udt.UDTClient;
import udt.UDTInputStream;
import udt.UDTOutputStream;
import udt.UDTServerSocket;
import udt.UDTSocket;

@ProtocolType(Name = "udt")
public class UdtProtocol implements IDDS_Protocol {
 private	UDTServerSocket serverSocket = null;
 private	UDTClient socketClient = null;
 private UDPEndPoint endpoint = null;
 private UDTSocket clientcall=null;
    
 //private  int socketBuffersize = 32;
 private  int waitZeroNum=50;//适应传递效率
 private volatile boolean isRecZero=true;
 private int maxZeroTime=15*10000;//15秒

 private  int recBuffersize = 16348;
 private   int TIMEOUT=20000;
   
    private boolean serverRunning=true;
   public UdtProtocol()
   {
	  
   }
   private boolean checkTimeout(long start){
		boolean to=System.currentTimeMillis()-start>TIMEOUT;
		if(to)
		    System.out.println("TIMEOUT");
		return to;
	}
    @Override
    public boolean SendData(String adress, byte[] data) {
      
        return false;
    }
    
    /**
     * 合并数据
     * @param src1
     * @param src2
     * @return
     */
    private byte[] CatBytes(byte[]src1,byte[]src2)
	{
		byte[] result=null;
		 if(src1==null&&src2==null)
		 {
			 return null;
		 }
		int len=0;
		int index=0;
		if(src1!=null)
		{
			len+=src1.length;
		}
		if(src2!=null)
		{
			len+=src2.length;
		}
	    result=new byte[len];
	    if(src1!=null)
	    {
	      System.arraycopy(src1, 0, result, 0, src1.length);
	      index=src1.length;
	    }
	    if(src2!=null)
	    {
	    	 System.arraycopy(src2, 0, result,index, src2.length);
	    }
		return result;
	}
    @Override
    public void DisConnect() {
        if (socketClient != null) {
            try {
                socketClient.shutdown();
            } catch (IOException e) {
             
                e.printStackTrace();
            }
        }

    }
	
    @Override
    public void RecData(String Address, IRecMsg rec) {
        String[] addr = Address.split(":");
        InetAddress local = null;
        try {
            local = InetAddress.getByName(addr[0]);
        } catch (UnknownHostException e) {
            e.printStackTrace();
        }
        int port = Integer.valueOf(addr[1]);
		try {
			serverSocket = new UDTServerSocket(local,port);
		} catch (SocketException e1) {
		
			e1.printStackTrace();
		} catch (UnknownHostException e1) {
		
			e1.printStackTrace();
		}
		Thread serverProcess=new Thread(new Runnable(){
		    /**
		     * 初始化时判断数据传递与接收的时间差
		     */
		    private boolean checkZeroFail()
		    {
		        if(!isRecZero)
		        {
		            //确定时间范围
		            if(waitZeroNum>maxZeroTime)
		            {
		            //说明是连续判断
		                waitZeroNum=maxZeroTime/2;
		            }
		        }
		        //最后一次判断会造成超过maxZeroTime
		        waitZeroNum=waitZeroNum+10;
		        if(waitZeroNum>maxZeroTime)
		        {
		            return false;//不能再等待
		        }
		        else
		        {
		            return true;
		        }
		    }
			 @Override
		public void run(){
				while(serverRunning)
				{
				try{
					
					UDTSocket s=serverSocket.accept();
					long start=System.currentTimeMillis();
					if(s==null)
					{
						continue;
					}
					clientcall=s;
					//socketClient=new UDTClient(s.getEndpoint());
					
					//assertNotNull(s);
					System.out.println("接收到客户端");
					
					UDTInputStream is=s.getInputStream();
					//is.setBlocking(false);
					byte[]buf=new byte[recBuffersize];
 					byte[] tmp=null;
 					
					while(true){
						if(checkTimeout(start))break;
						int c=is.read(buf);
						if(c<0)
						{
						    System.out.println("客户端接收c<0");
						    break;
						}
						else{
						    if(c==0)
						    {
						    	Thread.sleep(waitZeroNum);
						    	if(checkZeroFail())
						    	{
						            continue;
						    	}
						     }
						    else
						    {
						    	//找到一个恰当等待值，则允许2倍时间范围内浮动
						    	
						    	 if(isRecZero)
						    	 {
						    		 //
						    		 System.out.println("最大时间："+waitZeroNum);
						    		 int sn=((20+waitZeroNum)*((waitZeroNum-20)/10)+1)/2;
						    		 //已经确定
						    		  System.out.println("总时间："+sn);
						    	      maxZeroTime=sn*2;
						    	      isRecZero=false;
						    	 }
						    }
						    //
						    
							if(c==buf.length)
							{
								tmp=CatBytes(tmp,buf);
							}
							else
							{
							    System.out.println("客户端跳出接收c="+c);
								byte[] cur=new byte[c];
								System.arraycopy(buf, 0, cur, 0, c);
								tmp=CatBytes(tmp,cur);
								break;//没有达到缓存
								
							}
							Thread.yield();//防止高使用
						}
					}
				    String 	address=s.getEndpoint().getLocalAddress().getHostAddress()+":"+s.getEndpoint().getLocalPort();
					CallData(rec, tmp, address);
					
				}
				catch(Exception e){
					e.printStackTrace();
					//fail();
				}
				}
			}

			
		});
		serverProcess.setDaemon(true);
		serverProcess.setName("udtServer");
		serverProcess.start();
        }
       
   
    /**
     * 数据返回
     * @param rec 返回对象
     * @param data   传入的数据
     * @param address 来源地址
     */
    private void CallData(IRecMsg rec, byte[] data, String address) {
		rec.SaveInstance(this);
		rec.RecData(address, data);
	}

    @Override
    public void Close() {
    	serverRunning=false;
        endpoint.stop();

    }

    @Override
    public void ClientSocketClose() {
        if (socketClient != null) {
            try {
                socketClient.shutdown();
            } catch (IOException e) {
            
                e.printStackTrace();
            }
        }
        if(clientcall!=null)
        {
        	try {
				clientcall.close();
			} catch (IOException e) {
				
				e.printStackTrace();
			}
        }

    }

    @Override
    public void CreateClient(String ip, int port) {
        if (socketClient == null) {
            InetAddress local = null;
            try {
                local = InetAddress.getByName(ip);
            } catch (UnknownHostException e) {
                e.printStackTrace();
            }
            try {
                endpoint = new UDPEndPoint(local, port);
            } catch (SocketException e) {
              
                e.printStackTrace();
            } catch (UnknownHostException e) {
              
                e.printStackTrace();
            }
            try {
                socketClient = new UDTClient(endpoint);
            } catch (SocketException e) {
               
                e.printStackTrace();
            } catch (UnknownHostException e) {
             
                e.printStackTrace();
            }
        }

    }

    @Override
    public void CreateClient() {
        if (socketClient == null) {

            try {
                socketClient = new UDTClient(null, 0);
            } catch (SocketException e) {
               
                e.printStackTrace();
            } catch (UnknownHostException e) {
               
                e.printStackTrace();
            }
        }

    }

    @Override
    public boolean BindLocal(String locahost, int port) {
        InetAddress local = null;
        try {
            local = InetAddress.getByName(locahost);
        } catch (UnknownHostException e1) {
            e1.printStackTrace();
        }
        try {
            endpoint = new UDPEndPoint(local, port);
        } catch (SocketException e) {
            
            e.printStackTrace();
        } catch (UnknownHostException e) {
         
            e.printStackTrace();
        }
        if (socketClient != null) {
            try {
                socketClient = new UDTClient(endpoint);
               
            } catch (SocketException e) {
               
                e.printStackTrace();
            } catch (UnknownHostException e) {
              
                e.printStackTrace();
            }
        }

        return false;
    }

    @Override
    public boolean Connect(String remoteaddr, int port) {
        if (socketClient != null) {
        	try {
				socketClient.connect(remoteaddr, port);
			} catch (UnknownHostException e) {
				
				e.printStackTrace();
			} catch (InterruptedException e) {
				
				e.printStackTrace();
			} catch (IOException e) {
			
				e.printStackTrace();
			}
        	return true;
        }
        return false;
    }

    @Override
    public void ClientSocketSend(byte[] data) {
        if (socketClient != null) {
					try {
						socketClient.sendBlocking(data);
					} catch (IOException e1) {
						
						e1.printStackTrace();
					} catch (InterruptedException e1) {
						
						e1.printStackTrace();
					}
				
            try {
                socketClient.shutdown();
            } catch (IOException e) {
                e.printStackTrace();
            }
        }

    }

    @Override
    public void ClientSocketSendData(byte[] data) {
        if (socketClient != null) {
           
            	 try {
					socketClient.sendBlocking(data);
				} catch (IOException e) {
					
					e.printStackTrace();
				} catch (InterruptedException e) {
					
					e.printStackTrace();
				}
            

        }
    }

    @Override
    public void ServerSocketSend(byte[] data) {
        	if(clientcall!=null)
            	{
            		try {
            		
            			UDTOutputStream stream=clientcall.getOutputStream();
            			stream.write(data);
            			stream.flush();
            			stream.close();
            			clientcall.getSession().setActive(false);
            			clientcall.close();
					} catch (IOException e) {
						e.printStackTrace();
					}
            	}
    }

    @Override
    public void ServerSocketSendData(byte[] data) {
    	if(clientcall!=null)
    	{
    		try {
    		    UDTOutputStream stream=clientcall.getOutputStream();
    			stream.write(data);
    			stream.flush();
			} catch (IOException e) {
				
				e.printStackTrace();
			}
    	}
        }
    

    @Override
    public byte[] RecClientSocket() {
       
        byte[] realData = null;
       if (socketClient != null) {
          byte[] recData = new byte[recBuffersize];
            while (true) {
                int r = 0;
                try {
					r = socketClient.read(recData);
				} catch (IOException e) {
				    e.printStackTrace();
				} catch (InterruptedException e) {
				    e.printStackTrace();
				}
                if(r<0)
                {
                    System.out.println("客户端接收c<0");
                	break;
                }
                if(r==0)
                {
                	try {
						Thread.sleep(1000);//等待1秒
						continue;
					} catch (InterruptedException e) {
						
						e.printStackTrace();
					}
                }
                if (r < recData.length&&r>0) {
                    System.out.println("客户端跳出接收c="+r);
                    byte[]cur=new byte[r];
                    System.arraycopy(recData, 0, cur, 0, r);
                    realData=  CatBytes(realData,cur);
                    break;
                } else {
                	
                     realData= CatBytes(realData,recData);
                }
            }

        }
        try {
			socketClient.shutdown();
		} catch (IOException e) {
			e.printStackTrace();
		}
        return realData;
    }

    @Override
    public byte[] RecClientSocketData() {
    	 byte[] realData = null;
        if (socketClient != null) {
             byte[] recData = new byte[recBuffersize];
             while (true) {
                 int r = 0;
                 try {
 					r = socketClient.read(recData);
 				} catch (IOException e) {
 				    e.printStackTrace();
 				} catch (InterruptedException e) {
 				    e.printStackTrace();
 				}
                 if(r<0)
                 {
                     System.out.println("客户端接收c<0");
                     break;
                 }
                 if(r==0)
                 {
                     try {
                         Thread.sleep(1000);//等待1秒
                         continue;
                     } catch (InterruptedException e) {
                         
                         e.printStackTrace();
                     }
                 }
                 if (r < recData.length) {
                    byte[]cur=new byte[r];
                    System.arraycopy(recData, 0, cur, 0, r);
                    realData=  CatBytes(realData,cur);
                    System.out.println("客户端跳出接收c="+r);
                     break;
                 } else {
                 	
                      realData= CatBytes(realData,recData);
                 }
             }

         }
         return realData;
    }

    @Override
    public String GetBindAddress() {
      
        return null;
    }

    @Override
    public void SetBindAddress(String addr) {
       

    }

    @Override
    public String GetLocalAddress() {
       
        return null;
    }

    @Override
    public void SetSocketBufferSize(int size) {
       // socketBuffersize = size;

    }

    @Override
    public void SetRecBufferSize(int size) {
        recBuffersize = size;

    }

    @Override
    public String GetClientAddress() {
     
        return null;
    }
	

}
